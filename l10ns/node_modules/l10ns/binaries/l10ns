#!/usr/bin/env node

/**
 * Module dependencies
 */

var commands = require('commander');
var spawn = require('child_process').spawn;
var findup = require('findup-sync');
var path = require('path');
var open = require('open');
var _ = require('underscore');
var fs = require('fs');
var glob = require('glob');
var program = require('../configurations/program');
var text = require('../configurations/text');
var utilities = require('../libraries/utilities');
var log = require('../libraries/_log');
var updateNotifier = require('update-notifier');
var package = require('../package.json');

/**
 * Project paths
 */

var l10nsPath = findup('l10ns.json');

if(typeof process.argv[2] === 'undefined') {
  process.argv[2] = '--help';
}

if(process.argv[2] === '--version' || process.argv[2] === '-v') {
  console.log(package.version);
  return;
}

var processRequest = (process.argv.length >= 2 && process.argv[2] !== 'init' && process.argv[2] !== '--help' &&  process.argv[2] !== '-h');

if(processRequest && !l10nsPath) {
  console.log('You are not inside a l10ns project. Please create one with `l10ns init`.');
  return;
}

function track(cmd) {
  spawn(process.execPath, [path.join(__dirname, 'track.js'), cmd], {
    detached: true,
    stdio: 'ignore'
  }).unref();
}

/**
 * Add terminal colors
 */

require('terminal-colors');

/**
 * Global configurations
 */

global.program = program;
global.text = text;
global.commands = commands;

/**
 * Set from binary to true. To indicate that the binary have been run
 */

global.fromBinary = true;

var cli = require('../libraries');

commands
  .version(package.version)
  .option('-l, --lang <language>', 'specify language')
  .option('--port <port>', 'specify port for interface')
  .option('-e, --empty', 'only empty localizations')
  .option('-o, --open', 'open interface in browser')
  .option('--stack', 'with stack trace')
  .option('-p, --project <project>', 'specify project')

commands
  .command('init')
  .description('Initialize project')
  .action(function() {
    track('init');
    if(findup('l10ns.json')) {
      return console.log('Project already initialized.');
    }

    cli.init();
  });

commands
  .command('interface')
  .description('Starts web interface')
  .action(function() {
    track('interface');
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet');
    }

    cli.initialize()
      .then(function() {
        require('../interface/start');
      })
      .fail(function(error) {
        if(commands.stack && error) {
          console.log(error.stack);
        }

        console.log(error.message);
      });
  });

commands
  .command('search [q]')
  .description('Search localizations')
  .action(function(q) {
    track('search');
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet');
    }
    if(typeof q === 'undefined') {
      log.error('You need to provide a query in your search. E.g. gt search "some query"');
      return false;
    }

    cli.initialize()
      .then(function() {
        cli.search(q);
      })
      .fail(function(error) {
        if(commands.stack && error) {
          console.log(error.stack);
        }

        console.log(error.message);
      });
  });

commands
  .command('log')
  .description('Show log')
  .action(function() {
    track('log');
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet');
    }

    cli.initialize()
      .then(function() {
        if(commands.empty) {
          cli.log(commands.lang, 'empty');
        }
        else {
          cli.log(commands.lang, 'regular');
        }
      })
      .fail(function(error) {
        if(commands.stack && error) {
          console.log(error.stack);
        }

        log.error(error.message);
      });
  });

commands
  .command('update')
  .description('Update localization keys from source')
  .action(function() {
    track('update');
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet.');
    }

    cli.initialize()
      .then(function() {
        cli.update();
      })
      .fail(function(error) {
        if(commands.stack && error) {
          console.log(error.stack);
        }

        console.log(error.message);
      });
  });

commands
  .command('clean')
  .description('Remove non-used language data')
  .action(function() {
    track('clean');

    cli.initialize()
      .then(function() {
        var storageFiles = glob.sync(project.store + '/*.json');
        storageFiles.forEach(function(file) {
          if(!(path.basename(file, '.json') in project.languages)) {
            fs.unlink(file);
            console.log('Removed file: ' + path.basename(file));
          }
        });
        var compiledFiles = glob.sync(project.output + '/*.js');
        compiledFiles.forEach(function(file) {
          if(!/all\.js$/.test(file) && !(path.basename(file, '.js') in project.languages)) {
            fs.unlink(file);
            console.log('Removed file: ' + path.basename(file));
          }
        });
      })
      .fail(function(error) {
        if(commands.stack && error) {
          console.log(error.stack);
        }

        console.log(error.message);
      });
  });

commands
  .command('compile')
  .description('Compile localizations')
  .action(function() {
    track('compile');
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet.');
    }

    cli.initialize()
      .then(function() {
        cli.compile();
      })
      .fail(function(error) {
        if(commands.stack && error && error.stack) {
          console.log(error.stack);
        }

        if(error && error.message) {
          console.log(error.message);
        }
      });
  });

commands
  .command('set [reference] [value]')
  .description('Set localization')
  .action(function(reference, value) {
    track('set');
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet.');
    }

    cli.initialize()
      .then(function() {
        cli.set(reference, value, commands.lang);
      })
      .fail(function(error) {
        if(commands.stack && error) {
          console.log(error.stack);
        }

        console.log(error.message);
      });
  });


commands
  .command('configs')
  .description('Show configurations')
  .action(function() {
    track('configs');
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet.');
    }

    cli.initialize()
      .then(function() {
        console.log(_.clone(project));
      })
      .fail(function(error) {
        if(commands.stack && error) {
          console.log(error.stack);
        }

        console.log(error.message);
      });
  });

var notifier = updateNotifier({
  packageName: package.name,
  packageVersion: package.version,
  updateCheckInterval: 1000 * 60 * 60 * 24 * 7
});

if(notifier.update && notifier.update.latest !== notifier.update.current) {
  console.log('Update available: ' + notifier.update.latest);
  console.log('Run ' + '`npm install l10ns -g`'.green + '\n');
}

if(process.argv.length >= 3 && ['init', 'interface', 'search', 'log', 'update', 'compile', 'set', 'configs', 'clean'].indexOf(process.argv[2]) === -1) {
  process.argv[2] = '--help';
}

commands.parse(process.argv);
