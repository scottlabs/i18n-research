function encodeHTMLSource() {  var encodeHTMLRules = { "&": "&#38;", "<": "&#60;", ">": "&#62;", '"': '&#34;', "'": '&#39;', "/": '&#47;' },  matchHTML = /&(?!#?w+;)|<|>|"|'|\//g;  return function() {    return this ? this.replace(matchHTML, function(m) {return encodeHTMLRules[m] || m;}) : this;  };};
String.prototype.encodeHTML=encodeHTMLSource();
var tmpl = {};
  tmpl['JavascriptWrapper']=function anonymous(it) {
var out=';(function() {\n  var timezones = {"Europe/Stockholm":{"types":["d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","d"],"untilsoffsets},"America/Los_Angeles":{"types":["d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","s","s","d","d","d"],"untils":[9971999000,9972000000,25693199000,25693200000,41421599000,41421600000,57747599000,57747600000,73475999000,73476000000,89197199000,89197200000,104925599000,104925600000,120646799000,120646800000,126698399000,126698400000,152096399000,152096400000,162381599000,162381600000,183545999000,183546000000,199274399000,199274400000,215600399000,215600400000,230723999000,230724000000,247049999000,247050000000,262778399000,262778400000,278499599000,278499600000,294227999000,294228000000,309949199000,309949200000,325677599000,325677600000,341398799000,341398800000,357127199000,357127200000,372848399000,372848400000,388576799000,388576800000,404902799000,404902800000,420026399000,420026400000,436352399000,436352400000,452080799000,452080800000,467801999000,467802000000,483530399000,483530400000,499251599000,499251600000,514979999000,514980000000,530701199000,530701200000,544615199000,544615200000,562150799000,562150800000,576064799000,576064800000,594205199000,594205200000,607514399000,607514400000,625654799000,625654800000,638963999000,638964000000,657104399000,657104400000,671018399000,671018400000,688553999000,688554000000,702467999000,702468000000,720003599000,720003600000,733917599000,733917600000,752057999000,752058000000,765367199000,765367200000,783507599000,783507600000,796816799000,796816800000,814957199000,814957200000,828871199000,828871200000,846406799000,846406800000,860320799000,860320800000,877856399000,877856400000,891770399000,891770400000,909305999000,909306000000,923219999000,923220000000,941360399000,941360400000,954669599000,954669600000,972809999000,972810000000,986119199000,986119200000,1004259599000,1004259600000,1018173599000,1018173600000,1035709199000,1035709200000,1049623199000,1049623200000,1067158799000,1067158800000,1081072799000,1081072800000,1099213199000,1099213200000,1112522399000,1112522400000,1130662799000,1130662800000,1143971999000,1143972000000,1162112399000,1162112400000,1173607199000,1173607200000,1194166799000,1194166800000,1205056799000,1205056800000,1225616399000,1225616400000,1236506399000,1236506400000,1257065999000,1257066000000,1268560799000,1268560800000,1289120399000,1289120400000,1300010399000,1300010400000,1320569999000,1320570000000,1331459999000,1331460000000,1352019599000,1352019600000,1362909599000,1362909600000,1383469199000,1383469200000,1394359199000,1394359200000,1414918799000,1414918800000,1425808799000,1425808800000,1446368399000,1446368400000,1457863199000,1457863200000,1478422799000,1478422800000,1489312799000,1489312800000,1509872399000,1509872400000,1520762399000,1520762400000,1541321999000,1541322000000,1552211999000,1552212000000,1572771599000,1572771600000,1583661599000,1583661600000,1604221199000,1604221200000,1615715999000,1615716000000,1636275599000,1636275600000,1647165599000,1647165600000,1667725199000,1667725200000,1678615199000,1678615200000,1699174799000,1699174800000,1710064799000,1710064800000,1730624399000,1730624400000,1741514399000,1741514400000,1762073999000,1762074000000,1772963999000,1772964000000,1793523599000,1793523600000,1805018399000,1805018400000,1825577999000,1825578000000,1836467999000,1836468000000,1857027599000,1857027600000,1867917599000,1867917600000,1888477199000,1888477200000,1899367199000,1899367200000,1919926799000,1919926800000,1930816799000,1930816800000,1951376399000,1951376400000,1962871199000,1962871200000,1983430799000,1983430800000,1994320799000,1994320800000,2014880399000,2014880400000,2025770399000,2025770400000,2046329999000,2046330000000,2057219999000,2057220000000,2077779599000,2077779600000,2088669599000,2088669600000,2109229199000,2109229200000,2120119199000,2120119200000,2140678799000,2140678800000,2147397247000,2147483647000],"offsets}};\n\n  function getTimezoneOffset(timezoneOffset, options) {\n    options = options || {};\n    options.hours = typeof options.hours !== \'undefined\' ? options.hours : true;\n    options.zeroPaddingHours = typeof options.zeroPaddingHours !== \'undefined\' ? options.zeroPaddingHours : true;\n    options.minutes = typeof options.minutes !== \'undefined\' ? options.minutes : true;\n    options.colon = typeof options.colon !== \'undefined\' ? options.colon : true;\n    options.zulu = typeof options.zulu !== \'undefined\' ? options.zulu : false;\n\n    var offsetFloatingHours = timezoneOffset / 60;\n    var offsetHours;\n    var offsetMinutes;\n\n    if(timezoneOffset >= 0) {\n      offsetHours = Math.floor(offsetFloatingHours);\n      offsetMinutes = ((offsetFloatingHours % 1) * 60).toFixed(0);\n    }\n    else {\n      offsetHours = Math.ceil(offsetFloatingHours);\n      offsetMinutes = - ((offsetFloatingHours % 1) * 60).toFixed(0);\n    }\n    if(offsetMinutes < 10) {\n      offsetMinutes = \'0\' + offsetMinutes;\n    }\n\n    if(options.zulu && offsetHours === 0) {\n      return \'Z\';\n    }\n\n    var result = \'\';\n    if(options.zeroPaddingHours) {\n      if(offsetHours > -10 && offsetHours < 0) {\n        offsetHours = (offsetHours + \'\').replace(\'-\', \'-0\');\n      }\n      else if(offsetHours >= 0 && offsetHours < 10) {\n        offsetHours = \'0\' + offsetHours;\n      }\n    }\n    if(options.hours) {\n      if((offsetHours + \'\').charAt(0) !== \'-\') {\n        offsetHours = \'+\' + offsetHours;\n      }\n      result += offsetHours;\n    }\n    if(options.colon) {\n      result += \':\';\n    }\n    if(options.minutes) {\n      result += offsetMinutes;\n    }\n\n    return result;\n  }\n\n  function getLongLocalizedGMT(GMTFormat, timezoneOffset) {\n    return GMTFormat.replace(\'{0}\', getTimezoneOffset(timezoneOffset));\n  }\n\n  function roundTo(number, to) {\n    return Math.round(number / to) * to;\n  }\n\n  function toSignficantDigits(number, minimumSignificantDigits, maximumSignificantDigits) {\n    var multiple = Math.pow(10, maximumSignificantDigits - Math.floor(Math.log(number) / Math.LN10) - 1);\n    number = Math.round(number * multiple) / multiple + \'\';\n    var difference = maximumSignificantDigits - minimumSignificantDigits;\n    if(difference > 0 && /\\./.test(difference)) {\n      number = number.replace(new RegExp(\'0{1,\' + difference + \'}$\'), \'\');\n    }\n    var subtract = 0;\n    if(/^0\\./.test(number)) {\n      subtract = 2;\n    }\n    else if(/\\./.test(number)) {\n      subtract = 1;\n    }\n    while(number.length - subtract < minimumSignificantDigits) {\n      number += \'0\';\n    }\n\n    return number;\n  }\n\n  function toExponentDigits(number, it) {\n    var minimumMantissaIntegerDigits = 1\n      , maximumMantissaIntegerDigits = Infinity\n      , exponentGrouping = 1\n      , minimumMantissaSignificantDigits\n      , maximumMantissaSignificantDigits\n      , exponentNumber = 0;\n\n    if(it.type === \'floating\') {\n      if(it.maximumIntegerDigits === it.minimumIntegerDigits) {\n        minimumMantissaIntegerDigits = maximumMantissaIntegerDigits = it.minimumIntegerDigits;\n      }\n      else {\n        maximumMantissaIntegerDigits = it.maximumIntegerDigits;\n        exponentGrouping = it.maximumIntegerDigits;\n      }\n\n      minimumMantissaSignificantDigits = 1;\n      maximumMantissaSignificantDigits = it.minimumIntegerDigits + it.maximumFractionDigits;\n    }\n    else {\n      minimumMantissaIntegerDigits = maximumMantissaIntegerDigits = 1;\n      minimumMantissaSignificantDigits = it.minimumSignificantDigits;\n      maximumMantissaSignificantDigits = it.maximumSignificantDigits\n    }\n\n    if(number >= 1) {\n      var divider = Math.pow(10, exponentGrouping)\n        , integerLength = (number + \'\').replace(/\\.\\d+/, \'\').length;\n      while((integerLength < minimumMantissaIntegerDigits || integerLength > maximumMantissaIntegerDigits) &&\n            (exponentNumber + \'\').length === it.exponent.digits) {\n        number = number / divider;\n        exponentNumber += exponentGrouping;\n        integerLength = (number + \'\').replace(/\\.\\d+/, \'\').length;\n      }\n      if((exponentNumber + \'\').length !== it.exponent.digits) {\n        exponentNumber--;\n        number = number * divider;\n      }\n    }\n    else {\n      var multiplier = Math.pow(10, exponentGrouping)\n        , integerLength = (number + \'\').replace(/^0\\.\\d+/, \'\').replace(/\\.\\d+/, \'\').length;\n      while((integerLength < minimumMantissaIntegerDigits || integerLength > maximumMantissaIntegerDigits) &&\n            (Math.abs(exponentNumber) + \'\').length === it.exponent.digits) {\n        number = number * multiplier;\n        exponentNumber -= exponentGrouping;\n        integerLength = (number + \'\').replace(/^0\\.\\d+/, \'\').replace(/\\.\\d+/, \'\').length;\n      }\n      if((Math.abs(exponentNumber) + \'\').length !== it.exponent.digits) {\n        exponentNumber++;\n        number = number / multiplier;\n      }\n    }\n\n    var mantissa = toSignficantDigits(number, minimumMantissaSignificantDigits, maximumMantissaSignificantDigits)\n      , mantissa = mantissa.split(\'.\')\n      , exponent = it.symbols.exponential;\n    if(it.exponent.plusSign && exponentNumber > 0) {\n      exponent += it.symbols.plusSign;\n    }\n    exponent += exponentNumber;\n\n    if(it.type === \'floating\') {\n      if(it.minimumFractionDigits > 0) {\n        if(typeof mantissa[1] === \'undefined\') {\n          mantissa[1] = \'\';\n        }\n        while(mantissa[1].length < it.minimumFractionDigits) {\n          mantissa[1] += \'0\';\n        }\n      }\n    }\n\n    return {\n      integer: mantissa[0],\n      fraction: mantissa[1],\n      exponent: exponent\n    };\n  };\n\n  function formatNumber(it) {\n    if(typeof it.number !== \'number\') {\n      return it.symbols.nan;\n    }\n    if(it.number === Infinity) {\n      return it.symbols.plusSign + it.symbols.infinity;\n    }\n    if(it.number === -Infinity) {\n      return it.symbols.minusSign + it.symbols.infinity;\n    }\n\n    var number = Math.abs(it.number)\n      , prefix = it.prefix\n      , suffix = it.suffix\n      , currencySymbol =\n        \'([\\\\u0024\\\\u00A2-\\\\u00A5\\\\u058F\\\\u060B\\\\u09F2\\\\u09F3\\\\u09FB\\\\u0AF1\\\\\\\n           \\\\u0BF9\\\\u0E3F\\\\u17DB\\\\u20A0-\\\\u20BD\\\\uA838\\\\uFDFC\\\\uFE69\\\\uFF04\\\\\\\n           \\\\uFFE0\\\\uFFE1\\\\uFFE5\\\\uFFE6])\'\n      , startsWithCurrencySymbolSyntax = new RegExp(\'^\' + currencySymbol)\n      , endsWithCurrencySymbolSyntax = new RegExp(currencySymbol + \'$\');\n\n    if(it.percentage) {\n      prefix = prefix.replace(\'%\', it.symbols.percentSign);\n      suffix = suffix.replace(\'%\', it.symbols.percentSign);\n      number = number * 100;\n    }\n    else if(it.permille) {\n      prefix = prefix.replace(\'‰\', it.symbols.perMille);\n      suffix = suffix.replace(\'‰\', it.symbols.perMille);\n      number = number * 1000;\n    }\n\n    if(it.exponent) {\n      var exponent = toExponentDigits(number, it);\n      integerDigits = exponent.integer;\n      fractionDigits = exponent.fraction || \'\';\n      exponent = exponent.exponent;\n    }\n    else if(it.type === \'significant\') {\n      number = toSignficantDigits(number, it.minimumSignificantDigits, it.maximumSignificantDigits);\n    }\n    else {\n      number = roundTo(number, it.roundTo);\n    }\n\n    if(!it.exponent) {\n      var numberSplit = (number + \'\').split(\'.\')\n        , integerDigits = numberSplit[0]\n        , integerDigitsLength = integerDigits.length\n        , fractionDigits = numberSplit[1] || \'\'\n        , fractionDigitsLength = fractionDigits.length;\n\n      if(it.type === \'floating\' && integerDigitsLength < it.minimumIntegerDigits) {\n        var missingIntegerDigits = it.minimumIntegerDigits - integerDigitsLength;\n        for(var index = 0; index < missingIntegerDigits; index++) {\n          integerDigits = \'0\' + integerDigits;\n        }\n        integerDigitsLength = it.minimumIntegerDigits;\n      }\n      if(it.groupSize) {\n        var newIntegerDigits = \'\';\n        for(var index = integerDigitsLength - 1; index >= 0; index--) {\n          var primaryIndex = integerDigitsLength - it.groupSize.primary - 1;\n          if(index === primaryIndex) {\n            newIntegerDigits += it.symbols.group;\n          }\n          else if(index < primaryIndex && (primaryIndex - index) % it.groupSize.secondary === 0) {\n            newIntegerDigits += it.symbols.group;\n          }\n\n          newIntegerDigits += integerDigits.charAt(index);\n        }\n        integerDigits = newIntegerDigits.split(\'\').reverse().join(\'\');\n      }\n\n      if(it.type === \'floating\') {\n        if(fractionDigitsLength > it.maximumFractionDigits) {\n          fractionDigits = fractionDigits.substring(0, it.maximumFractionDigits);\n        }\n        else if(fractionDigitsLength < it.minimumFractionDigits) {\n          var missingFractionDigits = it.minimumFractionDigits - fractionDigitsLength;\n          for(var index = 0; index < missingFractionDigits; index++) {\n            fractionDigits += \'0\';\n          }\n        }\n\n        if(fractionDigits.length > it.minimumFractionDigits) {\n          fractionDigits = fractionDigits.replace(/[0]+$/, \'\');\n        }\n      }\n    }\n\n    if(it.currency) {\n      if(!endsWithCurrencySymbolSyntax.test(it.currency.symbol)) {\n        prefix = prefix + \' \';\n      }\n      if(!startsWithCurrencySymbolSyntax.test(it.currency.symbol)) {\n        suffix = \' \' + suffix;\n      }\n      prefix = prefix.replace(/¤+/, it.currency.symbol);\n      suffix = suffix.replace(/¤+/, it.currency.symbol);\n    }\n\n    var result = \'\';\n    result += prefix;\n    result += integerDigits;\n    if(fractionDigits.length > 0) {\n      result += it.symbols.decimal + fractionDigits;\n    }\n    if(exponent) {\n      result += exponent;\n    }\n    result += suffix;\n\n    if(it.paddingCharacter) {\n      var resultLength = result.length - 2;\n      result = result.replace(new RegExp(\'\\\\*\\\\\' + it.paddingCharacter), function(match) {\n        var replacement = \'\';\n        while(resultLength < it.patternLength) {\n          replacement += it.paddingCharacter;\n          resultLength++;\n        }\n\n        return replacement;\n      });\n    }\n\n    return result;\n  }\n\n  var localizations = {\n    \'en-US\': {\n      \'__getPluralKeyword\': function(cardinal) {\n        var cardinal = cardinal + \'\'\n          , n = cardinal\n          , i = parseInt(cardinal, 10)\n          , v = 0\n          , w = 0\n          , f = 0\n          , t = 0;\n\n        var hasFractionalDigitsSyntax = /\\.(\\d+)/;\n\n        if(hasFractionalDigitsSyntax.test(cardinal)) {\n          f = hasFractionalDigitsSyntax.exec(cardinal)[1];\n          v = f.length;\n          t = cardinal.replace(/0+$/, \'\');\n          t = hasFractionalDigitsSyntax.exec(t)[1];\n          w = t.length;\n        }\n        if(i === 1 && v === 0) {\n          return \'one\';\n        }\n        return \'other\';\n      },\n      \'__getOrdinalKeyword\': function(cardinal) {\n        var cardinal = cardinal + \'\'\n          , n = cardinal\n          , i = parseInt(cardinal, 10)\n          , v = 0\n          , w = 0\n          , f = 0\n          , t = 0;\n\n        var hasFractionalDigitsSyntax = /\\.(\\d+)/;\n\n        if(hasFractionalDigitsSyntax.test(cardinal)) {\n          f = hasFractionalDigitsSyntax.exec(cardinal)[1];\n          v = f.length;\n          t = cardinal.replace(/0+$/, \'\');\n          t = hasFractionalDigitsSyntax.exec(t)[1];\n          w = t.length;\n        }\n        if(n % 10 === 1 && n % 100 !== 11) {\n          return \'one\';\n        }\n        else if(n % 10 === 2 && n % 100 !== 12) {\n          return \'two\';\n        }\n        else if(n % 10 === 3 && n % 100 !== 13) {\n          return \'few\';\n        }\n        return \'other\';\n      },\n      \'__numberSymbols\': {\n        \'latn\': {\n          \'decimal\': \'.\',\n          \'group\': \',\',\n          \'list\': \';\',\n          \'percentSign\': \'%\',\n          \'plusSign\': \'+\',\n          \'minusSign\': \'-\',\n          \'exponential\': \'E\',\n          \'superscriptingExponent\': \'×\',\n          \'perMille\': \'‰\',\n          \'infinity\': \'∞\',\n          \'nan\': \'NaN\',\n          \'timeSeparator\': \':\'\n        }\n      },\n      \'__currencies\': {\n        \'USD\': {\n          \'name\': \'US Dollar\',\n          \'text\': {\n            \'local\': {\n              \'one\': \'dollar\',\n              \'other\': \'dollars\'\n            },\n            \'global\': {\n              \'one\': \'US dollar\',\n              \'other\': \'US dollars\'\n            }\n          },\n          \'symbol\': {\n            \'local\': \'$\',\n            \'global\': \'US$\',\n            \'reverseGlobal\': \'$US\'\n          }\n        }\n      },\n      \'__currencyUnitPattern\': {\n        \'one\': \'{0} {1}\',\n        \'other\': \'{0} {1}\'\n      },\n      \'__timezones\': {\n        \'Europe/Stockholm\': {\n          \'name\': {\n            \'long\': {\n              \'standard\': \'Central European Standard Time\',\n              \'daylight\': \'Central European Summer Time\',\n              \'generic\': \'Central European Time\'\n            },\n            \'short\': {\n              \'standard\': null,\n              \'daylight\': null,\n              \'generic\': null\n            }\n          },\n          \'hasCity\': true,\n          \'city\': \'Stockholm\',\n          \'regionFormat\': \'{0} Time\',\n          \'GMTFormat\': \'GMT{0}\'\n        },\n        \'America/Los_Angeles\': {\n          \'name\': {\n            \'long\': {\n              \'standard\': \'Pacific Standard Time\',\n              \'daylight\': \'Pacific Daylight Time\',\n              \'generic\': \'Pacific Time\'\n            },\n            \'short\': {\n              \'standard\': \'PST\',\n              \'daylight\': \'PDT\',\n              \'generic\': \'PT\'\n            }\n          },\n          \'hasCity\': true,\n          \'city\': \'Los Angeles\',\n          \'regionFormat\': \'{0} Time\',\n          \'GMTFormat\': \'GMT{0}\'\n        }\n      },\n      \'key-1\': function(it) {\n'+(it.functionBody)+'\n      }\n    }\n  };\n\n  function requireLocalizations(language) {\n    return (function(language) {\n      return function l(key) {\n        if(!(language in localizations)) {\n          return \'LANGUAGE_NOT_IN_LOCALIZATIONS: \' + language;\n        }\n        if(!(key in localizations[language])) {\n          return \'KEY_NOT_IN_LOCALIZATIONS: \' + key;\n        }\n        return localizations[language][key].call(localizations[language], arguments[1]);\n      };\n    })(language);\n  };\n\n  if(typeof require === "function" && typeof exports === \'object\' && typeof module === \'object\') {\n    module.exports = requireLocalizations;\n  }\n  else if (typeof define === "function" && define.amd) {\n    define(function() {\n      return requireLocalizations;\n    });\n  }\n  else {\n    window.requireLocalizations = requireLocalizations;\n  }\n})();\n';return out;
};
module.exports = tmpl;